@page "/v/{*path}"
@page "/v"

@using LionFire.Referencing
@using LionFire.Threading
@inject IServiceProvider ServiceProvider
@inject IVos  rootManager
@inject NavigationManager navManager
@*@inject Microsoft.Extensions.Logging.ILogger<string> logger*@
@inject ILogger<VosExplorer> Logger

@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Logging
@using LionFire.Persistence
@using System.Reflection
@using LionFire.Resolves
@using MudBlazor 

<MudIconButton Icon="@Icons.Material.Filled.ArrowBackIos" Style="@("opacity:" + (History.Count == 0 ? "0.2" : "1"))" @onclick=@Back></MudIconButton>
<MudIconButton Icon="@Icons.Material.Filled.ArrowForwardIos" Style="@("opacity:" + (ForwardHistory.Count == 0 ? "0.2" : "1"))" @onclick=@Forward></MudIconButton>
<MudIconButton Icon="@Icons.Material.Filled.Refresh" @onclick=@Refresh></MudIconButton>


<i class="fas fa-angle-double-down"></i>
<div>@Path</div>
@if (listings == null)
{
    <p><em>Loading... @Path</em></p>
}
else
{
    <h3>@Root</h3>
    <button @onclick="@(e=> GoToPath(".."))"><span class="oi oi-arrow-top" /></button>
    <button @onclick="@(e=> Refresh())"><span class="oi oi-reload" /></button>
    <div>@Path</div>

    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Name</th>
                <th>Type</th>
                @*<th>Dir</th>*@
            </tr>
        </thead>
        <tbody>
            @foreach (var listing in listings)
            {
                <tr>
                    <td>
                        <span @onclick="@(e => GoToPath(listing.Name))" class="@IconClasses(listing)" aria-hidden="true" data-glyph="battery-empty"></span>
                    </td>
                    <td>@listing.Name</td>
                    <td>@listing.Type</td>
                    <td></td>
                </tr>
            }
        </tbody>
    </table>

    @if (CurrentObject != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th></th>
                    <th>Property</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var pi in CurrentObject.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public))
                {
                    <tr>
                        <td>
                            @*<span @onclick="@(e => GoToPath(listing.Name))" class="@IconClasses(listing)" aria-hidden="true"></span>*@
                        </td>
                        <td>@pi.Name</td>
                        <td>@pi.GetValue(CurrentObject)</td>
                        @*<td></td>*@
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {

    #region CurrentObject

    [Parameter]
    public object CurrentObject
    {
        get => currentObject;
        set
        {
            if (currentObject == value) return;
            if (currentObject != null && currentObject is System.ComponentModel.INotifyPropertyChanged inpcDisabling)
            {
                inpcDisabling.PropertyChanged -= OnCurrentObjectPropertyChanged;
            }
            currentObject = value;
            if (currentObject != null && currentObject is System.ComponentModel.INotifyPropertyChanged inpcEnabling)
            {
                inpcEnabling.PropertyChanged += OnCurrentObjectPropertyChanged;
            }
        }
    }
    private object? currentObject;

    #endregion

    private void OnCurrentObjectPropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        InvokeAsync(async () =>
        {
            Logger.LogTrace("OnCurrentObjectPropertyChanged");
            await Refresh();
            StateHasChanged();
        });
    }

    #region Parameters

    [Parameter]
    public string Root { get; set; }

    #region Path

    [Parameter]
    public string Path
    {
        get => path;
        set
        {
            if (value == null) { value = ""; }
            if (!value.Contains(":"))
            {
                if (!value.StartsWith("/") && !value.StartsWith("\\")) { value = "/" + value; }
                value = $"vos:{value}";
            }
            path = value;
        }
    }
    private string path;

    #endregion

    #endregion

    #region State

    Stack<object> History = new Stack<object>();
    Stack<(object, string)> ForwardHistory = new Stack<(object, string)>();
    Stack<string> BreadCrumbPath = new Stack<string>();



    private Listing<object>[] listings;

    //private List<IReadHandle<object>> readHandles;

    #endregion

    #region Initialization

    protected override async Task OnInitializedAsync()
    {
        var x = ServiceProvider.GetService(typeof(IReferenceProviderService));
        navManager.LocationChanged += OnLocationChanged;
        await UpdateRoot();
        await Refresh();
    }

    #endregion

    #region Refresh

    private async Task UpdateRoot()
    {
        //logger.LogInformation("OnInitializedAsync " + uri);
        //System.Diagnostics.Debug.WriteLine("Uri: " + uri);
        //if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("Root", out var param))
        //{
        //    System.Diagnostics.Debug.WriteLine("Root: " + param);
        //    Root = param.First();
        //}
        //else
        //{
        //    System.Diagnostics.Debug.WriteLine("Uri could not find root: " + uri);
        //}
        Root = this.Path;
        //this.Path = Root;
        await Refresh();
        StateHasChanged();
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        Logger.LogInformation("OnLocationChanged " + uri);
        await UpdateRoot();
    }

    public Task GoToPath(string child)
    {
        if (child == "..")
        {
            Path = LionPath.GetParent(Path);
        }
        else
        {
            Path = LionPath.Combine(Path, child);
        }
        return Refresh();
    }

    public async Task RetrieveValue()
    {
        object newValue = null;
        try
        {
            var rh = Path?.ToReference()?.GetReadHandle<object>(); // TODO - get available types
            if (rh != null)
            {
                var result = (await rh.TryGetValue().ConfigureAwait(false));
                newValue = result.Value;
                if (result.IsSuccess != true)
                {
                    Logger.Debug($"Failed to retrieve {Path}: {result}");
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Exception when retrieving handle or value");
        }
        CurrentObject = newValue;
    }
    public async Task Refresh()
    {
        var root = rootManager.Get();

        var path = Path;
        if (path != null)
        {
            if (LionUri.TryGetUriScheme(path) == null)
            {
                path = "vos:" + path;
            }

            //if (path.StartsWith("file:"))
            //{
            //    path = "/file";
            //}
        }

#if OLD
//var hList = ((IReference)root[path].Reference).GetListingsHandle();
#else
        var reference = path?.ToReference();
        var hList = reference?.GetListingsHandle();
#endif

        if (hList == null)
        {
            listings = null;
            return;
        }


        var result = await hList.Resolve();
        listings = result?.Value.Value?.ToArray() ?? Array.Empty<Listing<object>>();

        if (listings.Length == 0)
        {
            // FIXME - why is hList empty?????????
            var list = new List<Listing<object>>();
            var vob = root[reference.Path];
            foreach (var x in vob)
            {
                list.Add(new Listing<object>(x.Name));
            }
            listings = list.ToArray();
        }


        //var newReadHandles = new List<IReadHandle<object>>();

        foreach (var listing in listings)
        {
            try
            {
                var childPath = LionPath.Combine(path, listing.Name);
                var handle = childPath.ToReference<object>().GetReadHandle<object>();

                //newReadHandles.Add(handle);
                listing.Type = (await handle.GetValue().ConfigureAwait(false))?.GetType().Name;
            }
            catch
            {
                listing.Type = "?";
            }
        }
        //readHandles = newReadHandles;
        await RetrieveValue().ConfigureAwait(false);
    }

    #endregion

    void Pop()
    {
        ForwardHistory.Push((CurrentObject, BreadCrumbPath.Pop()));
        CurrentObject = History.Pop();
    }

    void Push(object val, string name, bool fromForward = false)
    {
        if (val == null) return;
        if (!fromForward && ForwardHistory.Any() && Object.ReferenceEquals(ForwardHistory.Peek().Item1, val))
        {
            Forward();
            return;
        }

        History.Push(CurrentObject);

        BreadCrumbPath.Push(name);
        CurrentObject = val;

        if (!fromForward)
        {
            ForwardHistory.Clear();
        }
    }


    void Back()
    {
        if (History.Count > 0)
        {
            Pop();
        }
    }

    void Forward()
    {
        if (ForwardHistory.Count == 0) { return; }

        var next = ForwardHistory.Pop();
        Push(next.Item1, next.Item2, fromForward: true);
    }


    #region (Private) Utility methods

    private Uri uri => navManager.ToAbsoluteUri(navManager.Uri);

    public string IconClasses(Listing<object> listing)
    {
        if (listing.IsDirectory)
        {
            return "oi oi-folder";
        }
        return "oi oi-chevron-right";
    }

    #endregion
}
